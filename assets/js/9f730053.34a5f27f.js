"use strict";(self.webpackChunkcs421_f24_source=self.webpackChunkcs421_f24_source||[]).push([[5082],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),l=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=l(a),f=r,u=b["".concat(s,".").concat(f)]||b[f]||d[f]||i;return a?n.createElement(u,o(o({ref:t},p),{},{components:a})):n.createElement(u,o({ref:t},p))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}b.displayName="MDXCreateElement"},6846:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const i={id:"jdbc",title:"The Java Database Connectivity (JDBC) API",sidebar_label:"The Java Database Connectivity (JDBC) API"},o=void 0,c={unversionedId:"readings/wk4/jdbc",id:"readings/wk4/jdbc",title:"The Java Database Connectivity (JDBC) API",description:"Java Database Connectivity (JDBC) is an application programming interface (API) which defines how a client may access a database. JDBC is like a bridge between a Java application and a database.",source:"@site/docs/readings/wk4/jdbc.md",sourceDirName:"readings/wk4",slug:"/readings/wk4/jdbc",permalink:"/cs421/docs/readings/wk4/jdbc",draft:!1,editUrl:"https://jhu-oose-f23.github.io/cs421/docs/readings/wk4/jdbc.md",tags:[],version:"current",frontMatter:{id:"jdbc",title:"The Java Database Connectivity (JDBC) API",sidebar_label:"The Java Database Connectivity (JDBC) API"}},s={},l=[],p={toc:l};function d(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Java Database Connectivity (JDBC) is an application programming interface (API) which defines how a client may access a database. JDBC is like a bridge between a Java application and a database."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(2001).Z,width:"1920",height:"1200"})),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlite-jdbc")," library (which we've added as a dependency) includes both the (SQLite) database system and its JDBC driver",(0,r.kt)("sup",{parentName:"p",id:"fnref-1"},(0,r.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))," (to connect JDBC to the database)."),(0,r.kt)("p",null,"It is very easy to connect to a SQLite database: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Main {\n    public static void main(String[] args) throws SQLException {\n        final String URI = "jdbc:sqlite:./JBApp.db";\n        Connection conn = DriverManager.getConnection(URI);\n\n        // do something with the connection\n\n        conn.close();\n\n    }\n}\n')),(0,r.kt)("p",null,"The application above will connect to a SQLite database file ",(0,r.kt)("inlineCode",{parentName:"p"},"JBApp.db")," (it will create it if it does not exist).\nWhen creating a ",(0,r.kt)("em",{parentName:"p"},"connection"),", you provide an argument that specifies the database that you want to connect to. This argument is called a ",(0,r.kt)("strong",{parentName:"p"},"Universal Resource Identifier (URI)"),". A URI includes the application interface (",(0,r.kt)("inlineCode",{parentName:"p"},"jdbc"),"), the RDBMS (",(0,r.kt)("inlineCode",{parentName:"p"},"sqlite"),"), where to find the database (the host and path, ",(0,r.kt)("inlineCode",{parentName:"p"},"./JBApp.db")," in the aforementioned example), and any other connection parameters required (such as login details). Note: different parts of URI is separated by a colon."),(0,r.kt)("admonition",{title:"Common problems",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When you run the code above, typically, if you get an error, it will be something like this:\n",(0,r.kt)("inlineCode",{parentName:"p"},'Exception in thread "main" java.sql.SQLException: No suitable driver found'),".\nMake sure ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlite-jdbc")," library is added to your application, check for spelling mistakes and that it has the right path.\nAlso, ",(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/search?q=sqlite+jdbc+driver+installation"},"stackoverflow")," is your troubleshooting friend!")),(0,r.kt)("div",{className:"footnotes"},(0,r.kt)("hr",{parentName:"div"}),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol",id:"fn-1"},"JDBC is a set of interfaces; the interfaces are implemented by a database vendor's JDBC driver class. When you add the dependency for a database, it typically includes an application or data server as well as a JDBC driver that assists you to connect to the database in your Java application. ",(0,r.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}d.isMDXComponent=!0},2001:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/jdbc-b56f22932c17065dd130df67bee45bb0.png"}}]);