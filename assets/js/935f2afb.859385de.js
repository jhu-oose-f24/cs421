"use strict";(self.webpackChunkcs421_f24_source=self.webpackChunkcs421_f24_source||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Introduction","items":[{"type":"link","label":"Software Engineering & OOSE","href":"/cs421/docs/","docId":"readings/wk1/intro"},{"type":"link","label":"Audience","href":"/cs421/docs/readings/wk1/audience","docId":"readings/wk1/audience"},{"type":"link","label":"Team Formation","href":"/cs421/docs/readings/wk1/team_formation","docId":"readings/wk1/team_formation"},{"type":"link","label":"Project Ideation","href":"/cs421/docs/readings/wk1/ideation","docId":"readings/wk1/ideation"},{"type":"link","label":"Product Discovery","href":"/cs421/docs/readings/wk1/productdiscovery","docId":"readings/wk1/productdiscovery"},{"type":"link","label":"Client-Server Architecture","href":"/cs421/docs/readings/wk1/client_server","docId":"readings/wk1/client_server"},{"type":"link","label":"API","href":"/cs421/docs/readings/wk1/api","docId":"readings/wk1/api"},{"type":"link","label":"HTTP","href":"/cs421/docs/readings/wk1/http","docId":"readings/wk1/http"},{"type":"link","label":"CRUD","href":"/cs421/docs/readings/wk1/crud","docId":"readings/wk1/crud"},{"type":"link","label":"REST","href":"/cs421/docs/readings/wk1/rest","docId":"readings/wk1/rest"},{"type":"link","label":"SIS Class Search","href":"/cs421/docs/readings/wk1/sis","docId":"readings/wk1/sis"},{"type":"link","label":"SIS API","href":"/cs421/docs/readings/wk1/sisapi","docId":"readings/wk1/sisapi"},{"type":"link","label":"Postman","href":"/cs421/docs/readings/wk1/postman","docId":"readings/wk1/postman"},{"type":"link","label":"Software Stack","href":"/cs421/docs/readings/wk1/stack","docId":"readings/wk1/stack"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Building Software","items":[{"type":"link","label":"Build Software that is Needed","href":"/cs421/docs/readings/wk1/build_software","docId":"readings/wk1/build_software"},{"type":"link","label":"Software Requirement Specification","href":"/cs421/docs/readings/wk1/srs","docId":"readings/wk1/srs"},{"type":"link","label":"Software Process Models","href":"/cs421/docs/readings/wk1/software_process","docId":"readings/wk1/software_process"},{"type":"link","label":"OOSE Model","href":"/cs421/docs/readings/wk1/oose_model","docId":"readings/wk1/oose_model"},{"type":"link","label":"MyBooks App","href":"/cs421/docs/readings/wk1/mybooksapp","docId":"readings/wk1/mybooksapp"},{"type":"link","label":"User Story","href":"/cs421/docs/readings/wk1/user_stories","docId":"readings/wk1/user_stories"},{"type":"link","label":"Project Planning","href":"/cs421/docs/readings/wk1/project_planning","docId":"readings/wk1/project_planning"},{"type":"link","label":"Project Backlog","href":"/cs421/docs/readings/wk1/backlog","docId":"readings/wk1/backlog"},{"type":"link","label":"Project Board","href":"/cs421/docs/readings/wk1/board","docId":"readings/wk1/board"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Software Design Basics","items":[{"type":"category","label":"OOP","items":[{"type":"link","label":"Object-Oriented Programming","href":"/cs421/docs/readings/wk2/oop","docId":"readings/wk2/oop"},{"type":"link","label":"Encapsulation","href":"/cs421/docs/readings/wk2/encapsulation","docId":"readings/wk2/encapsulation"},{"type":"link","label":"Inheritance and Polymorphism","href":"/cs421/docs/readings/wk2/inheritance_poly","docId":"readings/wk2/inheritance_poly"}],"collapsed":true,"collapsible":true},{"type":"category","label":"UML","items":[{"type":"link","label":"Unified Modeling Language","href":"/cs421/docs/readings/wk2/uml","docId":"readings/wk2/uml"},{"type":"link","label":"Class Diagram","href":"/cs421/docs/readings/wk2/class_diagram","docId":"readings/wk2/class_diagram"},{"type":"link","label":"Relationships","href":"/cs421/docs/readings/wk2/uml_relationships","docId":"readings/wk2/uml_relationships"}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true}]},"docs":{"hw/hw1":{"id":"hw/hw1","title":"Homework 1","description":"* You are expected to work individually."},"hw/hw2":{"id":"hw/hw2","title":"Homework 2","description":"* You are expected to work individually."},"onboarding":{"id":"onboarding","title":"Homework Onboarding","description":"In order to provision you a repository to use for your homeworks from here on, we need this information."},"onboarding_error":{"id":"onboarding_error","title":" ","description":"Something went wrong trying to register you for the course."},"onboarding_success":{"id":"onboarding_success","title":" ","description":"You\u2019re registered for the course."},"proj/formation":{"id":"proj/formation","title":"Team Formation","description":"Each team must have 5 or 6 members. Students have freedom to choose their partners to form/join teams. The group formation process needs you to be a bit proactive, so please take action and have open conversations about your interests, technical backgrounds etc. but be considerate of each other!\xa0When deciding to to join/form a team, consider 1) the potential project area/idea you will be working on do you feel comfortable or are you passionate about learning the set of potential technologies that will likely be used in this work? 3) Any other considerations that are important/relevant to you."},"proj/group_creation":{"id":"proj/group_creation","title":" ","description":"Only do this form if your team members are finazlied."},"proj/group_error":{"id":"proj/group_error","title":" ","description":"Something went wrong trying to register your group."},"proj/group_success":{"id":"proj/group_success","title":" ","description":"Your group has been registered."},"proj/ideas":{"id":"proj/ideas","title":"Few Suggested Ideas","description":"In this page I have listed some potential project ideas based on (educational-related) problems or shortcomings of existing solutions that I see as a CS professor. This is to give you some inspiration, but if you like any of these ideas that you would like to work on as your OOSE project, feel free to talk to the course instructor!"},"proj/ideation":{"id":"proj/ideation","title":"Project Ideation","description":"Consider your project idea and answer the following questions! The more \\"yes\\" your idea receives, the stronger the proposal is. You don\'t have to come up with a project that checks every criterion below. In fact, that may be too big a project. However, big projects can be trimmed down. The problem is small (weak) proposals."},"proj/it0":{"id":"proj/it0","title":"Iteration 0","description":"Overview"},"proj/it1":{"id":"proj/it1","title":"Iteration 1","description":"Overview"},"proj/it2":{"id":"proj/it2","title":"Iteration 2","description":"Overview"},"proj/it3":{"id":"proj/it3","title":"Iteration 3","description":"Overview"},"proj/it4":{"id":"proj/it4","title":"Iteration 4","description":"Overview"},"proj/it5":{"id":"proj/it5","title":"Iteration 5","description":"Overview"},"proj/outline":{"id":"proj/outline","title":"Project Outline","description":"The purpose of the course project is to provide you with the opportunity to acquire hands-on experience with software development and its practices."},"proj/presentation":{"id":"proj/presentation","title":"Project Presentation","description":"The final presentation must be made during the period Monday, December 13th through Sunday December 19th. The deadilne to request to schedule your presentation time is Thursday Dec 9th, 11pm EST."},"proj/teamrepo":{"id":"proj/teamrepo","title":"Project Repository","description":"Project GitHub Repository"},"quiz/answers":{"id":"quiz/answers","title":"Review Quiz Answers","description":"True/False"},"quiz/questions":{"id":"quiz/questions","title":"Practice Questions","description":"Note that the followings are Sample questions only and their purpose is to provide some practice with the concepts/material covered in the class. The following is NOT a representative of the actual quiz test by any means. The actual exam may (and probably will) be different in terms of level of difficulty, types of questions, length, format, content etc. In general, if you have studied and have a deep understanding of the material covered in the class, you should have no problem in taking the quiz!"},"readings/wk1/api":{"id":"readings/wk1/api","title":"API","description":"Application Programming Interface or API is what allows one software application to \\"talk\\" to another. Imagine you want to connect your calendar and to-do application and keep them in sync; you would need to work with their APIs. Most modern software applications and almost the entire Web is made up of APIs. Naturally, this is where we start OOSE.","sidebar":"tutorialSidebar"},"readings/wk1/audience":{"id":"readings/wk1/audience","title":"Audience","description":"Students come to OOSE with a varied background; for some, OOSE is their first opportunity to work on a real software project. Other students come to OOSE with more experience (after having done an internship or worked in industry). Regardless of your level of experience with app development, OOSE is a course for you to become a better software engineer and have fun developing a project with your peers.","sidebar":"tutorialSidebar"},"readings/wk1/backlog":{"id":"readings/wk1/backlog","title":"Project Backlog","description":"Project Backlog (or Product Backlog) is the current list of User Stories for the Project.","sidebar":"tutorialSidebar"},"readings/wk1/board":{"id":"readings/wk1/board","title":"Github Project Board","description":"If you have not already, read \\"user stories\\" and \\"project backlog\\" sections before reading this page!","sidebar":"tutorialSidebar"},"readings/wk1/build_software":{"id":"readings/wk1/build_software","title":"Build software that is needed","description":"Engineers like to solve problems. If there are no problems handily available, they will create their own problems.","sidebar":"tutorialSidebar"},"readings/wk1/client_server":{"id":"readings/wk1/client_server","title":"Client-Server Architecture","description":"A client-server is a popular software design architecture which, at an abstract level, breaks down a software into two parts: client-side and server-side.","sidebar":"tutorialSidebar"},"readings/wk1/crud":{"id":"readings/wk1/crud","title":"CRUD","description":"CRUD stands for Create, Read, Update and Delete, refering to the four basic operations we perform on data stored in a database. Almost all internet consumer-related software uses CRUD; you use it every time you ask an application to take your new data or modify the existing one. In the context of the Mybooks App application:","sidebar":"tutorialSidebar"},"readings/wk1/git":{"id":"readings/wk1/git","title":"Git","description":"Version Control System, or VCS, allows you to save a snapshot of your coding project at any time you want. It\'s like making a copy of your project for backup and safe keeping, except that VCS typically does this in a more efficient fashion. It also comes with facilities to restore to an earlier copy (version)."},"readings/wk1/github":{"id":"readings/wk1/github","title":"GitHub","description":"Before we get into GitHub, I\'m going to emphasize the fact that Git and GitHub are not the same! Git is a version control system, whereas GitHub is a cloud-based platform that hosts Git repositories and facilitates team collaboration. Okay, now let\u2019s get started."},"readings/wk1/github_survey":{"id":"readings/wk1/github_survey","title":"Github Survey","description":"Please fill this survey form out to let us know your GitHub username. Please complete the form only once! Once you complete it, we will invite you to join jhu-oose Github organization and we\'ll provide you with a private repository within the organzation. Complete this by Wednesday (9/1) 11pm EST"},"readings/wk1/gitignore":{"id":"readings/wk1/gitignore","title":".gitignore","description":"A .gitignore file specifies intentionally untracked files that Git should ignore. You can manually create a .gitignore file (notice the leading dot) in the root of your Git repository and list the files and folders to be ignored in separate lines."},"readings/wk1/gradle":{"id":"readings/wk1/gradle","title":"Gradle","description":"We\'re going to be doing a quick drive-by of a popular build automation tool called Gradle."},"readings/wk1/http":{"id":"readings/wk1/http","title":"HTTP","description":"HTTP stands for Hypertext Transfer Protocol and is used to structure requests and responses over the internet.","sidebar":"tutorialSidebar"},"readings/wk1/ideation":{"id":"readings/wk1/ideation","title":"Project Ideation","description":"Software is an umbrella term! There is a good chance that your kitchen oven is equipped with embedded software. However, that kind of software is probably not the best choice for an OOSE project!","sidebar":"tutorialSidebar"},"readings/wk1/intellij":{"id":"readings/wk1/intellij","title":"IDE","description":"You are free to use any editor/IDE that you want. I recommend JetBrain IDEs. I will be using JetBrain\'s IntelliJ IDEA (henceforth IntelliJ) to scaffold your homework assignments."},"readings/wk1/intro":{"id":"readings/wk1/intro","title":"Software Engineering","description":"Definition of Software Engineering:","sidebar":"tutorialSidebar"},"readings/wk1/java":{"id":"readings/wk1/java","title":"Java","description":"Students come to OOSE with a varied background; some students may already know several languages and/or have prior software development/engineering experience but the common denominator is just a modest programming experience in Java. As such, we will stick with Java for instruction and homework assignments."},"readings/wk1/jbapp":{"id":"readings/wk1/jbapp","title":"JBApp","description":"Project description"},"readings/wk1/mybooksapp":{"id":"readings/wk1/mybooksapp","title":"MyBooks Project Description","description":"The goal of this project is to create a web application where we can create, view and search among our favorite books and authors. The app should streamline the process of adding new favorite books. Also, it should allow its users to list all the books and be able to search among them using different filters (e.g., ISBN number, author name, book title, etc.). The latter is not a must, but it would be nice to have the searching functionality. The user should also be able to list all authors in a separate view as well. Ideally, we might want to add logging in/out functionality to this app also, but that is not a priority (i.e., a nice to have feature, not a must have!)","sidebar":"tutorialSidebar"},"readings/wk1/okhttp":{"id":"readings/wk1/okhttp","title":"OkHttp","description":"OkHttp is a lightweight http client Java library. As you already saw, Postman serves the same purpose as a stand-alone tool, but you  may leverage OkHttp in your java program to send http requests and collect the results that the servers sends back."},"readings/wk1/oose":{"id":"readings/wk1/oose","title":"OOSE","description":"Object-Oriented Software Engineering (or as we like to call it, OOSE) is a course about developing software that others can understand, maintain, and grow. The course goals include improving your ability to:"},"readings/wk1/oose_model":{"id":"readings/wk1/oose_model","title":"OOSE Model","description":"In OOSE, We will follow a hybrid model which is mostly based on the agile methodology (in particular, based on agile development methods of  Extreme Programming (XP), and Scrum).","sidebar":"tutorialSidebar"},"readings/wk1/postman":{"id":"readings/wk1/postman","title":"Postman","description":"Using browser to send HTTP request (and receive the response) is cumbersome, especially during development. We\'ll be using a tool called Postman to make requests to our development server.","sidebar":"tutorialSidebar"},"readings/wk1/productdiscovery":{"id":"readings/wk1/productdiscovery","title":"Product Discovery","description":"Step one in building your software project is to understand what its requirements are. This process is called Product Discovery.","sidebar":"tutorialSidebar"},"readings/wk1/project_planning":{"id":"readings/wk1/project_planning","title":"Agile Estimating","description":"Suppose your car is broken and you take it to a mechanic. The mechanic runs some","sidebar":"tutorialSidebar"},"readings/wk1/rest":{"id":"readings/wk1/rest","title":"RESTful API","description":"A common practice to separate the Client and Server is Representational State Transfer, or REST architecture style.","sidebar":"tutorialSidebar"},"readings/wk1/sis":{"id":"readings/wk1/sis","title":"JHU SIS Class Search","description":"Most software applications that you use adhere to the client-server architecture. To better understand the client-server model, we will trace the request-response cycle for a simple application which all of you have used before//sis.jhu.edu/classes/.","sidebar":"tutorialSidebar"},"readings/wk1/sisapi":{"id":"readings/wk1/sisapi","title":"SIS API","description":"The Class Search application is an example of a client-server architecture. One of the advantages of using this model is that you can easily make multiple clients, all connected to the same server. In fact, JHU has another (smoewhat fancier) course search available at https://e-catalogue.jhu.edu/course-search/.","sidebar":"tutorialSidebar"},"readings/wk1/sissearchapp":{"id":"readings/wk1/sissearchapp","title":"SIS Search App","description":"We already discussed how to create a new Gradle Java project named sis-search-app here. Inside the project, create a new Java file named Main.java as follows:"},"readings/wk1/sissearchappgit":{"id":"readings/wk1/sissearchappgit","title":"Git","description":"Run the following command in the Intellij terminal while you are in the sis-search-app folder:"},"readings/wk1/sissearchappgithub":{"id":"readings/wk1/sissearchappgithub","title":"Github","description":"GitHub is a website that stores Git repositories on the internet to facilitate the collaboration that Git allows for. We will be using GitHub in this class. If you don\'t already have an account, please make one by visiting github.com/join"},"readings/wk1/software_process":{"id":"readings/wk1/software_process","title":"Software process models","description":"A software process is defined as a set of related activities that leads to the production of a software product. At an abstract level, a software process involves activities related to specification, design, development, validation (testing), and evolution (maintenance) of software.","sidebar":"tutorialSidebar"},"readings/wk1/srs":{"id":"readings/wk1/srs","title":"Software requirement specification","description":"A requirement is a single thing that the software has to do.","sidebar":"tutorialSidebar"},"readings/wk1/stack":{"id":"readings/wk1/stack","title":"Software Stack","description":"The choice of the software stack is another decision that needs to be made in the early stages of software development.","sidebar":"tutorialSidebar"},"readings/wk1/team_formation":{"id":"readings/wk1/team_formation","title":"Team Formation","description":"The students in OOSE are expected to self-organize into small teams of 5 to 6 students.","sidebar":"tutorialSidebar"},"readings/wk1/user_stories":{"id":"readings/wk1/user_stories","title":"User Story","description":"One of the most widely used ways of capturing requirements","sidebar":"tutorialSidebar"},"readings/wk1/wireframe":{"id":"readings/wk1/wireframe","title":"Wireframe","description":"Aside from listing desired functionalities/features, we also need to sketch out how the user will interact with our software."},"readings/wk2/class_diagram":{"id":"readings/wk2/class_diagram","title":"Class Diagram","description":"Class","sidebar":"tutorialSidebar"},"readings/wk2/cohesion":{"id":"readings/wk2/cohesion","title":"High Cohesion","description":"Ensure that each class is highly cohesive."},"readings/wk2/coupling":{"id":"readings/wk2/coupling","title":"Low Coupling","description":"Ensure that classes are loosely coupled to one another."},"readings/wk2/dip":{"id":"readings/wk2/dip","title":"Dependency inversion principle","description":"High-level classes shouldn\'t have to change because low-level classes change."},"readings/wk2/dp":{"id":"readings/wk2/dp","title":"Design principles","description":"State of flux is like tossing pebbles into water. Each change has ripples. And software always changes like an evolving organism. Ideally the changes are confined and have no adverse consequence."},"readings/wk2/encapsulation":{"id":"readings/wk2/encapsulation","title":"Encapsulation","description":"Encapsulation","sidebar":"tutorialSidebar"},"readings/wk2/good_design":{"id":"readings/wk2/good_design","title":"Design is hard!","description":"Perfect design is overrated! In my opinion, you can only do it if you time travel to future!"},"readings/wk2/identify_classes":{"id":"readings/wk2/identify_classes","title":"Extract classes from problem description","description":"Assume you have selected a few User Stories to implement for the next iteration. Now you need to extract classes from the problem description (User Stories)."},"readings/wk2/inheritance_poly":{"id":"readings/wk2/inheritance_poly","title":"Inheritance and Polymorphism","description":"Inheritance","sidebar":"tutorialSidebar"},"readings/wk2/isp":{"id":"readings/wk2/isp","title":"Interface segregation principle","description":"A class that implements an interface shouldn\'t be forced to implement methods it does not use."},"readings/wk2/lsp":{"id":"readings/wk2/lsp","title":"Liskov substitution principle","description":"When extending a class, consider that you should be able to pass objects of the subclass in place of objects of the parent class without breaking the client code."},"readings/wk2/model":{"id":"readings/wk2/model","title":"Get started with OOAD of your project","description":"After product discovery (i.e., writing Requirement Specification Document) and planning your iterations, it is time for Object-Oriented Analysis and Design:"},"readings/wk2/ocp":{"id":"readings/wk2/ocp","title":"Open-Closed principle","description":"Classes should be open for extension but closed for modification."},"readings/wk2/ooad":{"id":"readings/wk2/ooad","title":"Object-Oriented Analysis & Design","description":"Object-oriented analysis and design (OOAD) is a software engineering approach that models a system as a group of interacting objects."},"readings/wk2/oop":{"id":"readings/wk2/oop","title":"Object-Oriented Programming","description":"In a class-based object-oriented programming language, like Java, any object must be an instance of a class.","sidebar":"tutorialSidebar"},"readings/wk2/refactoring":{"id":"readings/wk2/refactoring","title":"Refactoring","description":"Design principles are guidelines; they are not laws! As with everything in life, you can go too far with applying these principles at the cost of making a design more complicated than it should be. You should try to be pragmatic and don\'t take these principles as dogma!"},"readings/wk2/srp":{"id":"readings/wk2/srp","title":"Single responsibility principle","description":"A class should have one, and only one, reason to change."},"readings/wk2/uml":{"id":"readings/wk2/uml","title":"Unified Modeling Language","description":"The Unified Modeling Language (UML) has emerged as the standard notation for OOAD.","sidebar":"tutorialSidebar"},"readings/wk2/uml_relationships":{"id":"readings/wk2/uml_relationships","title":"Relationships","description":"Relationships","sidebar":"tutorialSidebar"},"readings/wk3/adapter":{"id":"readings/wk3/adapter","title":"Adapter","description":"Adapter is a structural design pattern that allows allows the interface of an existing class to be used as another interface. Alternatively, it allows objects with incompatible interfaces to collaborate."},"readings/wk3/composite":{"id":"readings/wk3/composite","title":"Composite","description":"Composite is a structural design pattern that lets you compose objects into tree structures to represent whole-part hierarchies. Composite lets clients to treat a group of objects the same way as a single instance of the same type of object."},"readings/wk3/dp":{"id":"readings/wk3/dp","title":"Design patterns","description":"Where is your spare tire?"},"readings/wk3/factory":{"id":"readings/wk3/factory","title":"Factory","description":"Factory is a creational design pattern that allows you replace direct object construction calls (using the new operator) with call to a special factory method."},"readings/wk3/iterator":{"id":"readings/wk3/iterator","title":"Iterator","description":"Iterator is a behavioral design pattern that lets you traverse elements of a collection without exposing its underlying representation (list, stack, tree, etc.)."},"readings/wk3/observer":{"id":"readings/wk3/observer","title":"Observer","description":"Observer is a behavioral design pattern that lets you define a subscription mechanism to notify multiple objects about any events that happen to the object they\'re \\"observing.\\""},"readings/wk3/singleton":{"id":"readings/wk3/singleton","title":"Singleton","description":"Singleton is a creational design pattern that lets you ensure that a class has only one instance, while providing a global access point to this instance."},"readings/wk4/api":{"id":"readings/wk4/api","title":"Separation of client and server","description":"We have established that our interest lies in software solutions that conform to the Client-Server architecture. If you are still not so clear on Client-Server model, re-read Client-Server section as well as this wikipedia article."},"readings/wk4/code_reflect":{"id":"readings/wk4/code_reflect","title":"A Reflection on Implementation","description":"Recall how we need to fill in the attributes one by one using PreparedStatement:"},"readings/wk4/dao":{"id":"readings/wk4/dao","title":"CRUD operations in Data Access Object (DAO)","description":"CRUD stands for create, read, update, and delete. It refers to the common tasks you want to carry out on a database. Data access object (DAO) is a design pattern that follows high cohesion (and single responsibilty) principle and is used to abstract away data persistence operations from the rest of the application. You can read further about it here."},"readings/wk4/get":{"id":"readings/wk4/get","title":"Endpoint: HTTP Get","description":"Our first task is simple:"},"readings/wk4/jdbc":{"id":"readings/wk4/jdbc","title":"The Java Database Connectivity (JDBC) API","description":"Java Database Connectivity (JDBC) is an application programming interface (API) which defines how a client may access a database. JDBC is like a bridge between a Java application and a database."},"readings/wk4/jobs_employer_connect":{"id":"readings/wk4/jobs_employer_connect","title":"Connecting `Job` and `Employer` classes","description":"Since we have two separate (model) yet inter-related classes, we need to somehow tie the two together. We can acheive this by either making a reference to the Employer class from the Job class or keep a list of vacancies in Employer. Let us go with first one since in real world there may be so many job vacancies in a single company."},"readings/wk4/lambda":{"id":"readings/wk4/lambda","title":"Lambda expressions","description":"Setting the scene: anonymous classes!"},"readings/wk4/orm":{"id":"readings/wk4/orm","title":"Object Relational Mapping (ORM)","description":"Object-relational mapping (ORM) is an application (library) to map your objects to a relational database; typically, you describe which classes and properties in the code map to which tables and columns in the database, and then the library does all the copying and translating. In this scenario, ORM sits between JDBC and the rest of your Java application."},"readings/wk4/persist_objects_in_db":{"id":"readings/wk4/persist_objects_in_db","title":"Persist Objects in Databases","description":"So far, we set up and connected to our SQLite database, and know we need to communicate with it via SQL statements from our Java application. How can we use this arrangement to persist our application\'s data?"},"readings/wk4/post":{"id":"readings/wk4/post","title":"Endpoint: HTTP Post","description":"By design, the POST request method requests that a web server accepts the data enclosed in the body of the request message, most likely for storing it. It is often used when uploading a file or when submitting a completed web form."},"readings/wk4/rdbms":{"id":"readings/wk4/rdbms","title":"Relational Databases","description":"For simple applications, it is fine to persist data - to store stuff - directly to disk as text files."},"readings/wk4/sparkjava":{"id":"readings/wk4/sparkjava","title":"SparkJava","description":"We will be using a free and open source Java web application development framework called SparkJava for building our REST API."},"readings/wk4/sql":{"id":"readings/wk4/sql","title":"Creating Content Using JDBC and SQL","description":"We will interact with relational databases using JDBC and the Structured Query Language (SQL). SQL is a domain specific language designed for updating and retrieving data in table-based databases. We will not cover it in class but you will likely need to use it. SQL is very easy and descriptive. In most cases, a simple Google search will be sufficient to find \\"how to\\" do something with SQL. My go-to place to lookup SQL syntax is https://www.w3schools.com/sql/."},"readings/wk5/addemployer":{"id":"readings/wk5/addemployer","title":"Add an employer","description":"Now, let\'s implement a new view to facilitate adding employers. Add the following route to Main.main:"},"readings/wk5/cookies":{"id":"readings/wk5/cookies","title":"HTTP cookies","description":"Enter your username"},"readings/wk5/mvc":{"id":"readings/wk5/mvc","title":"Model-View-Controller Pattern","description":"MVC"},"readings/wk5/reuse":{"id":"readings/wk5/reuse","title":"Template reuse","description":"Overview"},"readings/wk6/bootstrap":{"id":"readings/wk6/bootstrap","title":"CSS Libraries/Frameworks","description":"Although you can do everything style-related using pure CSS, using a library/framework can make your life much easier as they come with lots of different pre-built designs, layouts, components, etc. that can readily be used out-of-the-box. Pure CSS gives you maximum flexibility and customization power on however you want to style your content, but the cost is the time/energy to do all the bits of the work on your own. Libraries/Frameworks on the other hand allow you to set up a nice looking front-end in matter of minutes but they decrease (to some extent) your customization flexibility."},"readings/wk6/css":{"id":"readings/wk6/css","title":"CSS","description":"Let\'s face the problem!"},"readings/wk6/front":{"id":"readings/wk6/front","title":"Front-end development","description":"Front-end development, sometimes refered to as client-side programming, manages everything that users visually see when interacting with an application. It defines the look and feel of the app and is about design and implementation of efficient, easy-tuo-use and stylish user interfaces."},"readings/wk6/html":{"id":"readings/wk6/html","title":"HTML","description":"Tags and attributes are the basis of an HTML page. Tags are used to indicate or mark up the start and end of an HTML element. Tags come inside"},"readings/wk6/js":{"id":"readings/wk6/js","title":"Adding logic using JavaScript","description":"Input validation"},"readings/wk6/js2":{"id":"readings/wk6/js2","title":"Accomplishing more with JS","description":"The power of JS and the myriad of things you can do with it in front-end development goes well beyond a simple form validation. To get a better taste of JS, let\'s do a more interesting task."},"readings/wk6/wireframe":{"id":"readings/wk6/wireframe","title":"Wireframe","description":"A wireframe is a two-dimensional illustration of a page\'s interface that specifically focuses on space allocation and prioritization of content, functionalities available, and intended behaviors. For these reasons, wireframes typically do not include any styling, color, or graphics."},"readings/wk7/cd":{"id":"readings/wk7/cd","title":"Continuous delivery with Heroku","description":"Continuous Delivery (or Continuous Deployment, or CD) is a software engineering approach in which software functionalities are delivered frequently through automated deployments."},"readings/wk7/ci":{"id":"readings/wk7/ci","title":"Continuous integration with Github Actions","description":"Continuous Integration (CI) is a software development practice where developers integrate code into a shared repository frequently, ideally several times a day! Among the benefits of this practice is that you can detect errors quickly and resolve them more easily. Watch this 6 mins video for an intro to CI."},"readings/wk7/db":{"id":"readings/wk7/db","title":"Database in the cloud","description":"Heroku does not play well with SQLite"}}}')}}]);